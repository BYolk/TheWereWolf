using System.Collections;
using System.Collections.Generic;
using UnityEngine;

#region 1、项目构建思路
//-----------------------------------------------------------------------------------------------------------------------------


///1、身份说明：
/// 1、狼人：每晚可以杀死一位玩家。狼队互相认识
/// 2、好人：
///     1、村民：没有任何特殊功能
///     2、神民：有特殊能力
///         1、预言家：每晚可以确认一位玩家的真实身份
///         2、女巫：
///             1、有解药和毒药，解药可救人，毒药可在天黑时毒死一人
///             2、每种药只能使用一次，同一晚不能使用两种药
///             3、使用解药前可以看谁被杀
///         3、猎人：当猎人被狼人杀掉且夜晚没有被女巫毒杀或者被投票出局后，可以选择枪毙一个活着的人跟他一起死
///         4、守卫：
///             1、每天晚上可守护一位玩家，包括自己
///             2、被守护的玩家不会被狼杀死，但可被女巫毒死
///             3、守卫不能连续两天守护同一个人，需要隔一天
///         5、警长：可以决定发言顺序并且拥有1.5票处决他人的权利


///2、游戏判定思路：
/// 1、游戏开始，4 神民、4 村民、4 狼人
///     1、4 个神民因为性质各不相同，使用 4 个 int 
///     2、4 个村名性质相同，4 个狼人性质也相同，使用两个 int 数组
/// 2、使用列表存放死亡玩家：一个死亡列表
/// 3、使用列表做游戏判定：一个判定列表
/// 4、游戏判定方法：
///     1、狼人是否团灭：
///         1、定义一个数字 num 作为标杆，根据 num 的值进行游戏的判定
///         2、把当前死亡列表中的号码放进判定表列（判定列表每次都要清空,进行更改操作）
///         3、定义一个移除列表
///         4、使用两个 for 循环嵌套遍历来比较当前死亡列表中的 int 数与狼人数组中的 4 个数相等的有几个，如果相等，num++;把相等的数加入移除列表，如果 num==4 ,好人获胜
///     2、神民是否团灭：同“狼人是否团灭”，如果神民团灭，狼人获胜
///     3、村民是否团灭：判定列表的长度是否等于 4，如果是，狼人获胜


///3、狼人杀主场景架构思路：
/// 1、StartGame 脚本：用于加载游戏。即加载 GameManager 游戏对象上的 GameManager 脚本
/// 2、GameManager 脚本：负责游戏的开始、运行与结束，承载游戏数据，控制场景的加载与跳转（跳转场景时不销毁场景，以免数据丢失），所以，在 GameManager 中需要管理以下游戏对象：
///     1、MessageManager：负责储存本场游戏所有的身份信息以及玩家的操作信息，判定游戏的胜利与执行
///     2、AudioSourceManager：负责游戏背景音乐的切换与音量的大小
///     3、UIManager：保存所有游戏面板，加载所有的面板并且负责页面的切换。既然管理的是所有的 UI 面板，所以它会管理一个 UI 面板的基类 UIPanel
///         --UIPanel：面板的基类，会有 4 类面板继承面板基类
///             1、MainPanel 主面板：负责主界面跳转至其他面板
///             2、GamePanel 游戏面板：给所有玩家发身份，将玩家信息传给 MessageManager 并跳转至“加载面板”，异步加载游戏场景
///             3、HelpPanel 帮助面板：介绍所有身份的职能
///             4、SetPanel 设置面板：设置游戏背景音乐大小及语言切换


///4、狼人杀游戏场景架构思路（使用责任链模式）：
/// 1、先在 GameManger 中负责游戏的开始，运行与结束，承载游戏数据，管理场景的加载与跳转，在跳转时不销毁场景，防止数据丢失
/// 2、然后在 UIManager 中加载所有游戏 UI 面板并且储存起来，实例化各面板，处理各面板对应事件，并构建任务链
/// 3、顺序显示以下面板：
///     1、WolfPanel：
///         1、狼人输入要击杀的玩家编号
///         2、狼人玩家商量后点击想要猎杀的玩家的相应号码的按钮，点击确定
///     2、WitchPanel：
///         1、女巫选择救人或者毒杀一名玩家
///         2、判定女巫玩家是否有解药或毒药，如果有则进入执行面板，选择救人或毒人，
///         3、没有解药看不到死亡玩家号码，并不能使用解药
///         4、没有毒药不能进入毒杀页面，不能输入毒杀玩家
///         5、使用过的药按钮变灰，不能点击
///     3、ProphetPanel：
///         1、预言家选择验证某位玩家的身份
///         2、各编号的玩家卡牌设置成可以拖动的按钮，将卡牌拖入水晶球后显示对应的身份，水晶球消失，进入下一面板
///     4、HunterPanel：
///         1、猎人选择是否开枪的状态
///         2、该状态由女巫是否毒杀猎人来显示，因为猎人只有在死亡时才能选择开枪带走一个玩家
///     5、GuardPanel：
///         1、守卫选择守护一位玩家免受狼人的猎杀
///         2、守卫输入一名玩家编号，输入数字必须在 1-12 之间，输入编号不能是上一轮守护的玩家编号也不能是死亡玩家的编号
///     6、DayNightPanel：
///         1、天亮天黑面板，负责游戏进程的执行与判定
///         2、告诉玩家昨夜信息，并且进入放逐页面，每次进行操作都要执行游戏是否结束的条件判定
///         3、玩家行为判定为：
///             1、单死不救不守：狼人击杀玩家，玩家没有被女巫救也没有被守卫守护，则判定该玩家死亡
///             2、单死同守同救：狼人击杀玩家，玩家被女巫救而且被守卫守护，则判定死亡（玩家被奶穿）
///             3、单死守护毒杀：狼人空刀或狼人击杀玩家与守卫守护的玩家是同一玩家，女巫毒杀玩家，则玩家死亡
///             4、单死同毒同杀：女巫毒杀玩家与狼人击杀玩家为一人，玩家死亡
///             5、单死空刀毒杀：女巫毒杀玩家，狼人空刀，玩家死亡
///             6、双死：狼人击杀玩家与守卫守护不是同一位玩家，且女巫毒杀其他玩家，则两个玩家死亡，刀毒不分先后
///             7、平安夜：狼人空刀且女巫没有撒毒
///             8、平安夜：狼人击杀玩家之后女巫使用解药且守卫未守护该玩家。
///             9、平安夜：狼人击杀玩家与守护守护的玩家为同一人，且女巫未使用解药
///             10、游戏胜利判定为：所有神民或所有村民死亡，则狼人获胜。所有狼人死亡，则平民获胜。
///             11、白天判定：
///                 1、猎人死亡且没有被毒杀，则猎人自己选择是否开枪，开枪后击杀一名玩家
///                 2、法官点击玩家商量好的要放逐（处死）的玩家编号，该玩家死亡，游戏进入天黑
///     7、WolfPanel：狼人输入击杀的玩家
///     8、……直到狼人或好人胜利，游戏结束


//-----------------------------------------------------------------------------------------------------------------------------
#endregion






#region 2、UI制作
//-----------------------------------------------------------------------------------------------------------------------------

///1、创建 FGUI 工程，创建游戏资源包并导入相应素材
/// 1、创建 FGUI 工程，命名为 TheWereWolf
/// 2、因为 FGUI 工程以包为单位进行项目管理，所以根据项目构建思路先把需要的包都创建出来
///     1、以 “Res_XXX” 形式命名包，用于管理项目全局资源
///         1、Res_Main：用于存放公用的游戏主要资源（导入的素材需要导出的要设置为“导出”）
///             0、在包下创建的文件夹在发布的时候不会发布出去，只是用于 FGUI 辅助管理，所以每个包可以放心创建多个文件夹进行资源管理
///             1、创建 Game 文件夹用于管理游戏过程中的资源，如“加载动画”素材、背景图片素材、“星星动画”素材
///             2、创建 Help 文件夹用于管理“游戏帮助界面”所需资源，如每个角色对应的卡片（帮助界面会对卡片进行文字说明）
///             3、创建 Main 文件夹用于管理“主界面”资源，如主界面按钮图片、按钮点击音效、主界面标题等
///             4、创建 Set 文件夹用于管理“设置界面”资源，如按钮的图标
///             5、创建 Maps 文件夹用于管理“设计图”资源，用于面板设计
///             6、创建 Defender 文件夹用于管理“守卫”相关资源
///             7、创建 Hunter 文件夹用于管理“猎人”相关资源
///             8、创建 Prophet 文件夹用于管理“预言家”相关资源
///             9、创建 Witch 文件夹用于管理“女巫”相关资源
///             10、创建 Wolf 文件夹用于管理“狼人”相关资源
///         2、Res_Game：用于存放公用的游戏过程界面主要资源
///             1、创建 Anim 文件夹用于存放游戏过程中所需动画资源
///             2、创建 BG 文件夹用于存放游戏过程中所需背景图片
///             3、创建 Button 文件夹用于存放游戏过程中所需按钮图片
///             4、创建 Number 文件夹用于存放游戏过程中所需位图字体图片
///         3、Res_Component：用于存放公用的组件
///     2、以 “Panel_XXX”形式命名包，用于管理各面板的 UI 资源
///         1、创建 Panel_Main 用于管理“主界面”面板的 UI 资源
///         2、创建 Panel_Game 用于管理“游戏界面”面板的 UI 资源
///         3、创建 Panel_Help 用于管理“帮助界面”面板的 UI 资源
///         4、创建 Panel_Set 用于管理“设置界面”面板的 UI 资源
///         5、创建 Panel_DayAndNight 用于管理“天黑天亮”面板的 UI 资源
///         6、创建 Panel_Defender 用于管理“守卫”面板的 UI 资源
///         7、创建 Panel_Hunter 用于管理“猎人”面板的 UI 资源
///         8、创建 Panel_Prophet 用于管理“预言家”面板的 UI 资源
///         9、创建 Panel_Witch 用于管理“女巫”面板的 UI 资源
///         10、创建 Panel_Wolf 用于管理“狼人”面板的 UI 资源
///         


///2、在 Res_Game 包的 Anim 文件夹中创建游戏过程中所需动画
/// 1、在 Anim 文件夹中点击上方导航栏“资源-->新建动画”
/// 2、在弹出的面板中将所需的动画序列帧图片导入
/// 3、设置动画的间隔，保存
/// 4、以上述方式新建“Card Light”动画、“Close Eye”动画和“Open Eye”动画，并将动画设置为导出


///3、在 Res_Game 包的 Number 文件夹中创建位图字体：
/// 1、点击上方“资源-->创建位图字体”，
/// 2、在弹出框中点击将其命名为 FontNumber，然后将数字图片拖入，设置动态改变字体颜色
/// 3、保存，将位图字体设置为导出
/// 


///4、在 Res_Component 包中创建公用的组件(相当于 Unity 的预制体)：
/// 1、PanleMask 组件：
///     1、PanelMask 组件用于遮罩用，即“从游戏界面变黑屏”以及“从黑屏到显示游戏界面”
///     2、遮罩一般使用图形，在 PanelMask 中创建一个图形
///     3、因为遮罩要遮整个界面，而游戏是 APP，一般 APP 都是 16:9，即宽高为 1600:900，所以设置图形宽高为 1600 和 900，X、Y 都为 0
///     4、将图形的默认颜色设置为黑色
///     5、为图形创建两个动效：
///         1、在库面板下方的显示面板中，点击动效，点击“+”按钮创建动效，分别创建 MaskHide 和 MaskShow 两个动效
///         2、双击 MaskHide，主面板下方显示时间轴，时间轴没有任何属性
///         3、点击图形，右键-->改变透明度，时间轴显示透明度属性
///         4、在默认的 0 帧处点击右边检查器的“帧”属性下的 Tween 选项，设置动效具有欢动效果，修改帧数据中的“透明度”为 1(默认就为 1)
///         5、在时间轴上点击 0.5 帧处，在“黄色区域”右键，转为关键帧，设置帧数据中的“透明度”为 0
///         6、保存，点击 Play （播放）按钮预览
///         7、在完成动效之后，需要点击主界面右上角的“退出”按钮退出当前动效的制作
///         8、MaskShow 制作同理，透明度从 0 变为 1
/// 2、EyeOpen 组件：
///     1、EyeOpen 组件用于承载“睁眼动画”
///     2、创建 EyeOpen 组件后，将 Res_Game 包中的 Anim 文件夹的“睁眼动画”拖入，在显示列表中或检查器面板中将其重命名为 Anim_EyeOpen
///     2、用老师设定好的动画大小：300 * 176 设置动画大小
///     3、因为 EyeOpen 组件只用于承载睁眼动画，所以组件大小要设置成动画大小
///     4、添加动效，将睁眼动画的透明度设置为从 0 帧到 0.75 帧从不可见到可见
/// 3、EyeClose 组件：同理制作 EyeClose 组件


///5、全局设置(默认设置)：
/// 1、在上方导航栏点击“文件-->项目设置”
/// 2、在弹出窗口中点击“快捷菜单”，在“文字大小”中添加如下记录（记得点击应用保存修改）：
///     1、按钮字体 50
///     2、说明字体 100
/// 3、在“快捷菜单”的“颜色”中添加记录：按钮颜色 #FFFF00(金黄色)
/// 4、点击“默认值”，将 Res_Main 包下的 Main 文件夹中的 Crumple 音效拖入 “按钮点击声音”
/// 


///6、在 Res_Component 包中创建公用的按钮：
/// 1、点击 Res_Component 包，点击上方“新建按钮”或“资源-->新建按钮”的方式新建按钮
/// 2、新建 Btn_KillNumber 按钮（用于杀死某个编号的玩家的按钮）：
///     1、在点击“新建按钮”后弹出的面板中命名按钮名称为 Btn_KillNumber
///     2、因为这个按钮不需要图片显示，按钮也可以使用文本显示，所以不需要为按钮添加图片，直接点击“创建”即可
///     3、点击新建的按钮，在显示列表由默认的三个图形，将其全部删除
///     4、在按钮上新建一个文本，输出数字 12 作为预览，然后设置字体为新建的位图字体 FontNumber
///         --设置字体的方式可以找到位图字体，将其拖入文本
///         --或者在文本的检查器中选择“文本”属性，点击“字体”右侧按钮，弹出框中选择项目字体，选择位图字体
///         --位图字体在项目中创建，属于项目字体
///     5、设置字体颜色为血红色（因为是用于杀死某个编号的玩家的按钮）
///     6、设置字体宽高为 133 * 79
///     7、设置字体字距为 -24（刚好显示两个数字）
///     8、设置字体的对其方式为“左右居中”、“上下居中”
///     9、因为按钮只需要承载数字，所以将 Btn_KillNumber 的大小也设置为 133 * 79，将字体 X、Y 归零
///     10、将文本命名为 title
///         1、后续代码中通过 title 来修改按钮的文本，即数字
///         2、按钮 title 对应的就是组件中按钮的“标题”，修改标题就修改了按钮的文本
///         3、可以创建一个 TestPanel 组件，大小为 1600 * 900，将按钮拖入，修改按钮检查器中的“普通按钮-->标题”，按钮文本会跟着相应改变
///     11、设置按钮的按下效果为缩放：
///         1、进入按钮组件，点击空白处，聚焦在按钮组件上
///         2、在右侧检查器中找到“按下效果”，选择缩放，调整缩放比例，默认为 0.8
/// 3、新建 Btn_ChangePanel 按钮（用于切换界面的按钮）：
///     1、新建按钮，命名为 Btn_ChangePanel，将 Res_Main 包下的 Main 文件夹中的 Btn_MainXXX 任一图标拖入到“正常状态图标”中
///     2、因为按钮图标的显示会在代码中控制，所以此处拖入哪一个 Btn_MainXXX 都无所谓，只是为了做 UI 设计的预览效果
///     3、双击新建号的 Btn_ChangePanel，进入按钮编辑
///     4、将图标命名为 icon（通过 icon 修改按钮图标）
///     5、为按钮创建一个文本，将文本命名为 title（通过 title 修改按钮文本）
///     6、在文本中输入“返  回”作为预览（按钮的具体文本会在代码中设置，“返  回”只是作为预览）
///     7、点击“字体大小”右侧“下箭头”按钮，选择“按钮字体 50”，修改字体大小为全局设置中设置好的“按钮字体 50”
///     8、点击“颜色”右侧“下箭头”按钮，选择“按钮颜色 #FFFF00”，修改字体颜色为全局设置中设置好的“按钮颜色 #FFFF00”（金黄色）
///     9、设置字体为“汉仪南宫体简”
///         1、使用系统字体“汉仪南宫体简”（注意：打包到其它系统，如果其它系统没有“汉仪南宫体简”，那么字体会使用默认字体）
///             1、点击字体按钮，在弹出框中选择系统字体，选择“汉仪南宫体简”
///             2、如果没有“汉仪南宫体简”，需要将“汉仪南宫体简”字体安装到系统中
///             3、下载“汉仪南宫体简.ttf”文件
///             4、打开 C 盘，Window 文件夹，找到 Fonts 文件夹，将下载好的 汉仪南宫体简.ttf 拖入文件夹即可
///             5、回到 FGUI，在系统字体中就可找到 汉仪南宫体简 了（此处可以找到，但是选择后并没有效果，所以还是选择了“楷体”）
///     10、将自动大小设置为“无”，因为该按钮是通用的，设置自动大小可能会导致按钮随着文本的数量自动进行文本的缩放
///     11、设置文本宽高与按钮宽高一致，位置 X、Y 归零
///     12、设置文本对齐方式为“上下居中”、“左右居中”
///     13、将 icon 删除掉，因为我们要用代码去加载图片，加载图片一般使用装载器
///     14、创建装载器，重命名为 icon，装载器大小设置为与按钮相同大小，即宽高为 312 * 75，位置归零
///     15、调整显示列表的显示顺序，文本要在装载器下面，因为显示顺序代表着渲染顺序，文本要渲染在图标上面
///     16、设置按下效果为缩放
/// 4、同理创建 Btn_Act 按钮（用于表示“执行”的按钮）：
///     1、新建按钮，命名为 Btn_Act，设置按钮正常状态图片为 Res_Main 包下的 Prophet 文件夹的 “2-Topaz”（用于设定大小），点击“创建”
///     2、将新建按钮显示列表中的图片删除，添加一个文本命名为 title，添加一个装载器命名为 icon
///     3、同理设置按钮字体、按钮字体大小与按钮颜色
///     4、在文本框中输入“确  定”作为预览
///     5、因为“确定”按钮的图标的底色会有点杂，所以将文本的“描边”勾选上，整体效果会更好
///     6、设置文本大小与按钮宽高一致，位置归零
///     7、将文本大小选择为无
///     8、设置文本“左右居中”、“上下居中”
///     9、设置装载器大小与按钮宽高一致，位置归零
///     10、设置装载器和文本的显示顺序，文本在下方显示
///     11、设置按下效果为变暗


///7、制作主界面：
/// 1、点击 Panle_Main 包，新建组件，命名为 Main，大小设置为 1600 * 900，设置为导出
/// 2、找到 Res_Main 包下的 Maps 文件夹，选择“主界面”，将其拖入 Main 组件的检查器中的“设计图-->资源”
/// 3、对照设计图，先创建按钮：
///     1、开始游戏按钮：
///         1、将 Res_Component 包中的 Main 文件夹中的 Btn_ChangePanel 按钮拖入 Main 组件，将其对准设计图的“开始游戏”按钮
///         2、根据设计图“开始按钮”的图标，在 Res_Mian 包的 Main 文件夹中找到对应的图标，将其拖入按钮检查器中的“普通按钮-->图标”中
///         3、在“普通按钮-->标题”中输入“开始游戏”（设置按钮文本）
///     2、同理设置“游戏帮助”、“游戏设置”、“退出游戏”按钮
///     3、重命名四个按钮为：Btn_StartGame、Btn_Help、Btn_Set、Btn_ExitGame
/// 4、设置标题：
///     1、将 Res_Component 包中的 Main 文件夹中的 MainTitle 拖入 Main 组件，重命名为 MainTitle
///     2、设置 MainTitle 的大小对应设计图标题大小
///     3、注意：虽然把图片缩小，但是图片本身还是那么大，而我们根本用不到那么大的图片，还是会照成资源浪费，最好的办法是让美术做相同大小的图
/// 5、设置背景图片：
///     1、将 Res_Component 包中的 Main 文件夹中的 MainBG 拖入 Main 组件，重命名为 BG
///     2、设置 MainBG 的宽高为 1600 * 900，位置归零
///     3、将 MainBG 在显示列表中的顺序调整为第一位，最先渲染
///     4、再将 MainTitle 调整到显示列表第二位
/// 6、设置 PanelMask（每个面板都需要）：
///     1、将 Res_Component 包下的 PanelMask 组件拖入 Main 组件中
///     2、将其重命名为 PanelMask
///     3、将位置归零
///     4、后续通过代码控制 PanelMask
///     5、为了方便预览，可以点击 PanelMask 在显示列表中右侧的“眼睛”图标那一列的按钮，将其在 FGUI 编辑器中不可见
///         --注意，只是在 FGUI 编辑器中不可见，它其实还是存在的，可点击播放按钮进行预览
///     6、将 PanelMask 在检查器中的基本属性中的“不可触摸”勾选上（这样才能透过 PanelMask 和按钮交互）
/// 7、为 Main 组件设置一个“显示 Main 面板”的动效：
///     1、添加一个图形，重命名为 WhiteMask
///     2、让图形位置归零，和 Main 面板等宽高 1600 * 900
///     3、添加动效，命名为 WhiteMaskAnim
///     4、右键 WhiteMask，选择“改变透明度”
///     5、从 0 帧处勾选“Tween”，做透明度的缓动动效
///     6、点击 0.25 帧处，在黄色区域“右键-->转为关键帧”，设置帧数据的不透明度为 0，保存
///     7、点击右上角“退出”按钮退出动效编辑
/// 8、将 Main 组件设置为导出
/// 


///8、制作帮助界面：
/// 1、点击 Panel_Help 包，右键创建组件，命名为 Main，大小设置为 1600 * 900，设置为导出
/// 2、同理，将 Res_Main 包下的 Main 文件夹中的“帮助界面”的设计图拖入 Main 组件的 “设计图-->资源”中
/// 3、先将帮助界面 UI 制作完毕，最后再添加背景
/// 4、将 Res_Main 包的 Help 文件加中的 IDView 拖入 Main 组件，命名为 Img_IDView 将大小设置到与设计图中的一样大，用作角色身份文本的底图
/// 5、在 Main 中新建文本，命名为 Text_ID，在文本中输入“身 份”作为预览，后续会在代码中根据角色列表动态显示角色名称
///     1、将文本字体设置为预设中的“按钮字体 50”
///     2、将文本颜色设置为预设中的“按钮颜色 #FFFF00”
///     3、虽然它不作为按钮使用
///     4、字体设置为“汉仪南宫体简”（我的“汉仪南宫体简”不生效，改用简体）
///     5、将文本对齐方式设置为 上下左右居中
///     6、将文本宽高调整到“Img_IDView”同宽高
///     7、取消文本自动大小
/// 6、设置每个身份的介绍文本：
///     1、设置介绍文本的底图：
///         1、将 Res_Main 包下的 Help 文件夹中的 Introduce 拖入场景，命名为 Img_Introduce
///         2、注意：Introduce 底图的放大需要使用“九宫格”模式，边缘部分不参与放大
///         3、双击 Introduce 图片，在弹出框中找到缩放模式，选择九宫格，设置上下左右分别为 55、48、88、84，应用、保存
///         4、将 Introduce 放大至与设计图同宽高
///     2、添加文本，命名为 Text_Introduce
///         1、设置字体大小为“自定义大小 30”（说明文本的字体不能太大）
///         2、设置文本宽高为 523 * 163（女巫的说明文字最多，这个大小能正好显示女巫的说明文本）
///         3、颜色设置为金黄色
///         4、自动大小设置为无
///         5、对其方式设置为 “左右居中”、“上下居中”
///         5、其余不用改变
/// 7、将“身份文本底图 Img_IDView”、“身份文本 Text_ID”、“身份说明底图 Img_Introduce”、“身份说明文本 Text_Introduce”归为一组：
///     1、勾选上面 4 个元件，按 Ctrl + G
///     2、因为这个组只用于方便文本显示，不需要真实存在，所以不用勾选为高级组
///     3、将组命名为 Group_Introduce
/// 8、制作“返回”按钮：
///     1、找到 Res_Component 包下的 Btn_ChangePanel 按钮，将其拖入 Main 组件，命名为 Btn_Return
///     2、将 Btn_Return 按钮与设计图中的“返回”按钮对应
///     3、找到 Res_Main 包下的 Mian 文件夹下的 Btn_MainOrange，将其拖入 Btn_Return 中的“普通按钮-->图标”选项
/// 9、制作身份卡片循环列表：
///     1、添加列表，命名为 CardList ，将宽高设置为 1600 * 406，位置设置为 (-4,0)，重命名为
///     2、设置列表布局为“单行横排”
///     3、设置列表对其方式为“左右居中”、“上下居中”
///     4、设置溢出处理为“水平滚动”
///     5、设置渲染顺序为“拱形”（最中间的渲染会放大，可以挡其它列表项，其它列表项挡不了中间项）
///     6、设置边缘大小中的边缘留空的上下为：47、21、
///     7、制作列表的项目资源：
///         1、将列表的项目资源（卡牌）设置为按钮，因为按钮的名称和图标都很容易获取（获取按钮的 title 和 icon）
///         2、新建按钮，命名为 Btn_HelpCard，将 Res_Main 包下的 Help 文件夹的 ID3 图片拖入按钮的“正常状态图片”
///         3、双击 Btn_HelpCard，将卡牌删掉（要设置 ID3 卡牌的原因是设置按钮的初始大小，具体的图片是要通过代码来加载的）
///         4、添加装载器，命名为 icon，将宽高设置到与按钮同宽高 300 * 300，位置归零
///             --此处注意，装载器一定要命名为 icon，因为 FGUI 是通过 icon 名称的装载器来加载图标的，不命名为 icon，图标无法正常显示
///     8、将制作好的按钮拖入列表的“项目资源”选项中
///     9、点击“编辑列表数据”：
///         1、添加五次“+”按钮，添加五项资源
///         2、在 Res_Main 下的 Help 文件夹中选择五张卡片拖入对应的五项资源的“图标资源”中
///         3、应用保存（这些添加操作只用于预览，后续会用代码控制列表的渲染）
///     10、根据预览效果调整“列距”，将列距设置为21
/// 10、制作背景图片：
///     1、将 Res_Main 包下的 HelpBG 拖入 Main 组件，命名为 HelpBG，设置大小为 1600 * 900，位置归零
///     2、注意，将图片拖入组件后设置组件大小的操作都是不支持的：
///         1、如果原本图片大缩放小了会浪费资源，因为虽然缩放了但图片本身其实还是那么大
///         2、如果原本图片小放大了会造成图片模糊
///     3、调整 Main 组件下元件的显示顺序，将 HelpBG 调整到第一位
///     4、设置 HelpBG 的图片颜色为红色
/// 11、制作 PanelMask：
///     1、将 Res_Component 的 PanelMask 拖入 Main 组件，命名为 PanelMask
///     2、将 PanelMask 设置为不可触摸，位置归零
///     3、点击“显示列表”中 PanelMask “眼睛图标”那一列，让 PanelMask 在 FGUI 中不可见，但它是存在的
///     


///9、制作设置界面：
/// 1、在 Panel_Set 包下新建组件，命名为 Main，宽高为 1600 * 900，设置为导出
/// 2、同理将 Res_Main 包下的 Maps 文件夹下的“设置界面”拖入 Main 组件的 “设计图-->资源”中
/// 3、在 Main 组件中新建文本，用于显示“游戏音量”，命名为 Text_Sound
///     1、在输入框中输入“游戏音量：”，设置字体大小为 80
///     2、设置字体颜色为“按钮颜色 #FFFF00”，即金黄色
///     3、设置字体类型为“汉仪南宫体简”
/// 4、赋值粘贴 Text_Sound，命名为 Text_Language
///     1、修改输入框的文本为“语言设置：”
/// 5、制作“返回按钮”：
///     1、找到 Res_Component 包下的 Btn_ChangePanel 按钮，拖入 Main 组件中，命名为 Btn_Return
///     2、找到 Res_Main 包下的 Btn_MainBlue 图标，将其拖入 Btn_ChangePanel 按钮的“普通按钮-->图标”中
/// 6、新建滑动条，用于控制音量：
///     1、点击新建滑动条，命名为 Slider_Sound
///     2、将标题显示设置为百分比，点击下一步
///     3、找到 Res_Main 包下的 Set 文件夹，找到背景图片，拖入“背景图片”中，点击下一步
///     4、找到伸缩条图片，拖入“滑动条伸缩部分”，点击下一步
///     5、找到伸缩条按钮，拖入“按钮正常状态图片”，点击“创建”
/// 7、将新建的滑动条拖入 Main 组件中，放置到设计图中对应的位置，双击滑动条
///     1、选中文本，调整文本大小，将文本放置在滑动条右边（设计图对应位置）
///     2、调整字体大小为 40，颜色为金黄色，对齐方式为“左右居中”、“上下居中”
///     3、调整文本框大小，让其能够显示 100%
/// 8、制作“语言设置”下拉框（ComboBox）：
///     1、点击新建“下拉框”，命名为 Combo_Language 在弹出框中点击“下一步”
///     2、找到 Res_Main 包中的 Main 文件夹，选择 Btn_MainGreen，将其拖入“正常状态图片”，点击“下一步”
///     3、背景图片选择“滑动条”的背景图片即可（在 Res_Main 包下的 Set 文件夹中），点击“下一步”
///     4、设置弹出列表中每个项目的正常状态图片，找到 Res_Main 包中的 Main 文件夹，选择 Btn_MainPurple，将其拖入，点击“创建”
///     5、可以在库面板中看到，会新建三个元件，分别是 ComboBox1、ComboBox1_item、ComboBox1_popup
///         1、ComboBox1：下拉框
///         2、ComboBox1_item：下拉框的每一项
///         3、ComboBox1_popup：下拉框的弹出菜单
///     6、双击 ComboBox1，进入下拉框设置，点击 Title 文本：
///         1、字体大小设置为 50
///         2、字体设置为“汉仪南宫体简”
///         3、字体颜色设置为金黄色
///         4、文本对其设置为“左右居中”、“上下居中”
///     7、双击 ComboBox1_item，进入下拉框选项设置：
///         1、设置按钮的点击效果为变暗
///         2、设置 Title 字体：
///             1、字体大小设置为 50
///             2、字体设置为“汉仪南宫体简”
///             3、字体颜色设置为金黄色
///             4、文本对其设置为“左右居中”、“上下居中”
///     8、将 ComboBox1 拖入 Main 面板：
///         1、调整位置到设计图中相应位置
///         2、设置下拉框的可见项目数为 3（中文、英文、日文）
///         3、设置弹出方向为“向下”
///         4、点击“编辑列表项目”，添加三个列表项目，将 ComboBox1_item 拖入对应的“图标”中
///         5、设置文本（对外显示）为中文、英文、日文，对应的值为 1、2、3
///         5、保存
/// 9、设置“设置界面”的背景图片：
///     1、找到 Res_Main 包下的 Help 文件夹下的 HelpBG，将其拖入 Mian 组件，命名为 SetBG
///     2、将 SetBG 位置归零，宽高设置为 1600 * 900
///     3、将图片颜色设置为红色
///     4、将 SetBG 在显示列表中的显示顺序设置为第一位
///     5、因为“设置界面”内容不多，背景图片放大后比较模糊，优化策略是：
///         1、将图片的透明度降低，将不透明度设置为 0.4
///         2、点击 Main 组件空白部分，聚焦到 Main 组件，勾选背景颜色，将背景颜色设置为黑色
/// 10、找到 Res_Component 中的 PanelMask 拖入 Main 组件：
///     1、命名为 PanelMask
///     2、将 PanelMask 位置归零，勾选不可触摸
///     3、在显示列表中点击 PanelMask 的眼睛按钮，让其在 FGUI 中不可见，但它是真实存在的，点击运行测试即可看到
///     


///10、制作游戏界面）：
/// 1、制作发牌界面组件：
///     1、点击 Panel_Game 包，“右键-->新建组件”，命名为 Main，宽高设置为 1600 * 900，再设置为导出
///     2、找到 Res_Main 包的 Maps 文件夹下的“发牌界面”，将其拖入到 Main 组件的“设计图-->资源”中
///     3、制作卡牌（按钮）：
///         1、新建按钮（按钮的图标和文字很容易获取，title 即文字，icon 即图标），在弹出框中命名为 Btn_Card
///         2、找到 Res_Game 包的 BG 文件夹中的 CardsBG，将其拖入到“正常状态图片”
///         3、双击 Btn_Card，设置按钮：
///             1、将原本的图片命名为 CardBG（不用删除，作为背景图片用，在点击图片按钮后再动态加载处新的图片）
///             2、因为卡牌的图片显示需要动态加载，所以需要使用装载器，新建装载器，命名为 icon，将宽高设置为与按钮同等宽高 300 * 300
///             3、因为 Btn_Card 按钮的点击不需要有默认的 up、down、over、selectedOver 等效果，所以需要重新设置：
///                 1、点击控制器，命名为 c1
///                 2、将原本的 4 个页面删除，另外新增 3 个页面，名称分别命名为 HideID、ShowID、LoadGame，保存
///                     1、没有点击卡牌时，显示“HideID”页面
///                     2、点击卡牌时，显示“ShowID”页面，并显示说明文字
///                     3、LoadGame：当所有牌都发完后，显示加载游戏的面板
///                 3、设置 Btn_Card 的轴心为 (0.5,0.5)，因为要实现点击卡牌后卡牌翻转的效果，那么轴心就应该在正中心
///                     --FGUI 轴心默认在左上角
/// 2、制作向导界面组件：
///     1、点击 Panel_Game 包，“右键-->新建组件”，命名为 GuideMessage，宽高设置为 955 * 667，再设置为导出
///     2、为 GuideMessage 增加控制器：新增三个页面，分别命名为 HideID、ShowID、LoadGame，保存
///     3、在 HideID 页面下，新增一个文本：
///         1、设置字体为“汉仪南宫体简”
///         2、设置字体大小为“说明文字 100”
///         3、设置字体颜色为金黄色
///         4、在文本框中输入“号玩家看身份”
///         5、再将自动大小设置为“无”
///         6、设置字体为“左右居中”，“上下居中”
///         7、调整文本宽高为 904 * 104
///             
/// 






//-----------------------------------------------------------------------------------------------------------------------------
#endregion











public class Note : MonoBehaviour
{
    #region

    #endregion
    
}
